{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red26\green28\blue31;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c13725\c14902\c16078;\cssrgb\c100000\c100000\c100000;
}
\margl1440\margr1440\vieww31640\viewh20620\viewkind0
\deftab720
\pard\pardeftab720\sl500\sa271\partightenfactor0

\f0\fs38\fsmilli19385 \cf2 \expnd0\expndtw0\kerning0
static_cast\
\pard\pardeftab720\sl440\partightenfactor0

\fs30 \cf2 `static_cast` is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions. `static_cast` performs no runtime checks. This should be used if you know that you refer to an object of a specific type, and thus a check would be unnecessary. Example:\
\pard\pardeftab720\sl320\partightenfactor0

\fs26 \cf2 void func(void *data) \{\
  // Conversion from MyClass* -> void* is implicit\
  MyClass *c = static_cast<MyClass*>(data);\
  ...\
\}\
\
int main() \{\
  MyClass c;\
  start_thread(&func, &c)  // func(&c) will be called\
      .join();\
\}\
\pard\pardeftab720\sl440\sa330\partightenfactor0

\fs30 \cf2 In this example, you know that you passed a\'a0
\fs26 MyClass
\fs30 \'a0object, and thus there isn't any need for a runtime check to ensure this.\
\pard\pardeftab720\sl500\sa271\partightenfactor0

\fs38\fsmilli19385 \cf2 dynamic_cast\
\pard\pardeftab720\sl440\partightenfactor0

\fs30 \cf2 `dynamic_cast` is useful when you don't know what the dynamic type of the object is. It returns a null pointer if the object referred to doesn't contain the type casted to as a base class (when you cast to a reference, a `bad_cast` exception is thrown in that case).\
\pard\pardeftab720\sl320\partightenfactor0

\fs26 \cf2 if (JumpStm *j = dynamic_cast<JumpStm*>(&stm)) \{\
  ...\
\} else if (ExprStm *e = dynamic_cast<ExprStm*>(&stm)) \{\
  ...\
\}\
\pard\pardeftab720\sl440\sa330\partightenfactor0

\fs30 \cf2 You cannot use\'a0
\fs26 dynamic_cast
\fs30 \'a0if you downcast (cast to a derived class) and the argument type is not polymorphic. For example, the following code is not valid, because\'a0
\fs26 Base
\fs30 \'a0doesn't contain any virtual function:\
\pard\pardeftab720\sl320\partightenfactor0

\fs26 \cf2 struct Base \{ \};\
struct Derived : Base \{ \};\
int main() \{\
  Derived d; Base *b = &d;\
  dynamic_cast<Derived*>(b); // Invalid\
\}\
\pard\pardeftab720\sl440\sa330\partightenfactor0

\fs30 \cf2 An "up-cast" (cast to the base class) is always valid with both\'a0
\fs26 static_cast
\fs30 \'a0and\'a0
\fs26 dynamic_cast
\fs30 , and also without any cast, as an "up-cast" is an implicit conversion (assuming the base class is accessible, i.e. it's a\'a0
\fs26 public
\fs30 \'a0inheritance).\
\pard\pardeftab720\sl500\sa271\partightenfactor0

\fs38\fsmilli19385 \cf2 Regular Cast\
\pard\pardeftab720\sl440\sa330\partightenfactor0

\fs30 \cf2 These casts are also called C-style cast. A C-style cast is basically identical to trying out a range of sequences of C++ casts, and taking the first C++ cast that works, without ever considering\'a0
\fs26 dynamic_cast
\fs30 . Needless to say, this is much more powerful as it combines all of\'a0
\fs26 const_cast
\fs30 ,\'a0
\fs26 static_cast
\fs30 \'a0and\'a0
\fs26 reinterpret_cast
\fs30 , but it's also unsafe, because it does not use\'a0
\fs26 dynamic_cast
\fs30 .\
In addition, C-style casts not only allow you to do this, but they also allow you to safely cast to a private base-class, while the "equivalent"\'a0
\fs26 static_cast
\fs30 \'a0sequence would give you a compile-time error for that.\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 Some people prefer C-style casts because of their brevity. I use them for numeric casts only, and use the appropriate C++ casts when user defined types are involved, as they provide stricter checking.\
\pard\pardeftab720\partightenfactor0

\fs26 \cf2 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/a/1255015"}}{\fldrslt 
\f1 \cf3 \cb4 Share}}
\f1 \cf3 \cb4 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/posts/1255015/edit"}}{\fldrslt \cf3 Improve this answer}}\
\pard\pardeftab720\partightenfactor0

\f0 \cf2 \cb1 \
}